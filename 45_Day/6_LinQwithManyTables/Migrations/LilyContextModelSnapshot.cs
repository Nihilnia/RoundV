// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _6_LinQwithManyTables.Lily.Data;

namespace _6_LinQwithManyTables.Migrations
{
    [DbContext(typeof(LilyContext))]
    partial class LilyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("latin1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<byte[]>("Attachments")
                        .HasColumnType("longblob")
                        .HasColumnName("attachments");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("business_phone");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company");

                    b.Property<string>("CountryRegion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country_region");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email_address");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("fax_number");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("home_phone");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state_province");

                    b.Property<string>("WebPage")
                        .HasColumnType("longtext")
                        .HasColumnName("web_page");

                    b.Property<string>("ZipPostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("zip_postal_code");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "City" }, "city");

                    b.HasIndex(new[] { "Company" }, "company");

                    b.HasIndex(new[] { "FirstName" }, "first_name");

                    b.HasIndex(new[] { "LastName" }, "last_name");

                    b.HasIndex(new[] { "StateProvince" }, "state_province");

                    b.HasIndex(new[] { "ZipPostalCode" }, "zip_postal_code");

                    b.ToTable("customers");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<byte[]>("Attachments")
                        .HasColumnType("longblob")
                        .HasColumnName("attachments");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("business_phone");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company");

                    b.Property<string>("CountryRegion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country_region");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email_address");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("fax_number");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("home_phone");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state_province");

                    b.Property<string>("WebPage")
                        .HasColumnType("longtext")
                        .HasColumnName("web_page");

                    b.Property<string>("ZipPostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("zip_postal_code");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "City" }, "city")
                        .HasDatabaseName("city1");

                    b.HasIndex(new[] { "Company" }, "company")
                        .HasDatabaseName("company1");

                    b.HasIndex(new[] { "FirstName" }, "first_name")
                        .HasDatabaseName("first_name1");

                    b.HasIndex(new[] { "LastName" }, "last_name")
                        .HasDatabaseName("last_name1");

                    b.HasIndex(new[] { "StateProvince" }, "state_province")
                        .HasDatabaseName("state_province1");

                    b.HasIndex(new[] { "ZipPostalCode" }, "zip_postal_code")
                        .HasDatabaseName("zip_postal_code1");

                    b.ToTable("employees");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.EmployeePrivilege", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int>("PrivilegeId")
                        .HasColumnType("int")
                        .HasColumnName("privilege_id");

                    b.HasKey("EmployeeId", "PrivilegeId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "EmployeeId" }, "employee_id");

                    b.HasIndex(new[] { "PrivilegeId" }, "privilege_id");

                    b.ToTable("employee_privileges");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.InventoryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comments");

                    b.Property<int?>("CustomerOrderId")
                        .HasColumnType("int")
                        .HasColumnName("customer_order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_order_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("TransactionCreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_created_date");

                    b.Property<DateTime?>("TransactionModifiedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("transaction_modified_date");

                    b.Property<sbyte>("TransactionType")
                        .HasColumnType("tinyint")
                        .HasColumnName("transaction_type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerOrderId" }, "customer_order_id");

                    b.HasIndex(new[] { "ProductId" }, "product_id");

                    b.HasIndex(new[] { "PurchaseOrderId" }, "purchase_order_id");

                    b.HasIndex(new[] { "TransactionType" }, "transaction_type");

                    b.ToTable("inventory_transactions");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.InventoryTransactionType", b =>
                {
                    b.Property<sbyte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.ToTable("inventory_transaction_types");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("AmountDue")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("amount_due")
                        .HasDefaultValueSql("'0.0000'");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("invoice_date");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("Shipping")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("shipping")
                        .HasDefaultValueSql("'0.0000'");

                    b.Property<decimal?>("Tax")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("tax")
                        .HasDefaultValueSql("'0.0000'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "fk_invoices_orders1_idx");

                    b.HasIndex(new[] { "Id" }, "id");

                    b.ToTable("invoices");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("order_date");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime")
                        .HasColumnName("paid_date");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_type");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("ship_address");

                    b.Property<string>("ShipCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ship_city");

                    b.Property<string>("ShipCountryRegion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ship_country_region");

                    b.Property<string>("ShipName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ship_name");

                    b.Property<string>("ShipStateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ship_state_province");

                    b.Property<string>("ShipZipPostalCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ship_zip_postal_code");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("shipped_date");

                    b.Property<int?>("ShipperId")
                        .HasColumnType("int")
                        .HasColumnName("shipper_id");

                    b.Property<decimal?>("ShippingFee")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("shipping_fee")
                        .HasDefaultValueSql("'0.0000'");

                    b.Property<sbyte?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("status_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<double?>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasColumnName("tax_rate")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte?>("TaxStatusId")
                        .HasColumnType("tinyint")
                        .HasColumnName("tax_status_id");

                    b.Property<decimal?>("Taxes")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("taxes")
                        .HasDefaultValueSql("'0.0000'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "customer_id");

                    b.HasIndex(new[] { "EmployeeId" }, "employee_id")
                        .HasDatabaseName("employee_id1");

                    b.HasIndex(new[] { "StatusId" }, "fk_orders_orders_status1");

                    b.HasIndex(new[] { "Id" }, "id")
                        .HasDatabaseName("id1");

                    b.HasIndex(new[] { "ShipZipPostalCode" }, "ship_zip_postal_code");

                    b.HasIndex(new[] { "ShipperId" }, "shipper_id");

                    b.HasIndex(new[] { "TaxStatusId" }, "tax_status");

                    b.ToTable("orders");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateAllocated")
                        .HasColumnType("datetime")
                        .HasColumnName("date_allocated");

                    b.Property<double>("Discount")
                        .HasColumnType("double")
                        .HasColumnName("discount");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("quantity");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    b.Property<decimal?>("UnitPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("unit_price")
                        .HasDefaultValueSql("'0.0000'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StatusId" }, "fk_order_details_order_details_status1_idx");

                    b.HasIndex(new[] { "OrderId" }, "fk_order_details_orders1_idx");

                    b.HasIndex(new[] { "Id" }, "id")
                        .HasDatabaseName("id2");

                    b.HasIndex(new[] { "InventoryId" }, "inventory_id");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("product_id1");

                    b.HasIndex(new[] { "PurchaseOrderId" }, "purchase_order_id")
                        .HasDatabaseName("purchase_order_id1");

                    b.ToTable("order_details");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.OrderDetailsStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status_name");

                    b.HasKey("Id");

                    b.ToTable("order_details_status");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.OrdersStatus", b =>
                {
                    b.Property<sbyte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status_name");

                    b.HasKey("Id");

                    b.ToTable("orders_status");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.OrdersTaxStatus", b =>
                {
                    b.Property<sbyte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    b.Property<string>("TaxStatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tax_status_name");

                    b.HasKey("Id");

                    b.ToTable("orders_tax_status");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Privilege", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("PrivilegeName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("privilege_name");

                    b.HasKey("Id");

                    b.ToTable("privileges");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<byte[]>("Attachments")
                        .HasColumnType("longblob")
                        .HasColumnName("attachments");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<bool>("Discontinued")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("discontinued");

                    b.Property<decimal>("ListPrice")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("list_price");

                    b.Property<int?>("MinimumReorderQuantity")
                        .HasColumnType("int")
                        .HasColumnName("minimum_reorder_quantity");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("product_code");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("product_name");

                    b.Property<string>("QuantityPerUnit")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("quantity_per_unit");

                    b.Property<int?>("ReorderLevel")
                        .HasColumnType("int")
                        .HasColumnName("reorder_level");

                    b.Property<decimal?>("StandardCost")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("standard_cost")
                        .HasDefaultValueSql("'0.0000'");

                    b.Property<string>("SupplierIds")
                        .HasColumnType("longtext")
                        .HasColumnName("supplier_ids");

                    b.Property<int?>("TargetLevel")
                        .HasColumnType("int")
                        .HasColumnName("target_level");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductCode" }, "product_code");

                    b.ToTable("products");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("approved_date");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpectedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expected_date");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<decimal?>("PaymentAmount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("payment_amount")
                        .HasDefaultValueSql("'0.0000'");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<decimal>("ShippingFee")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("shipping_fee");

                    b.Property<int?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("SubmittedBy")
                        .HasColumnType("int")
                        .HasColumnName("submitted_by");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("submitted_date");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("supplier_id");

                    b.Property<decimal>("Taxes")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("taxes");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedBy" }, "created_by");

                    b.HasIndex(new[] { "Id" }, "id")
                        .IsUnique()
                        .HasDatabaseName("id3");

                    b.HasIndex(new[] { "StatusId" }, "status_id");

                    b.HasIndex(new[] { "SupplierId" }, "supplier_id");

                    b.ToTable("purchase_orders");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("datetime")
                        .HasColumnName("date_received");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    b.Property<bool>("PostedToInventory")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("posted_to_inventory");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("purchase_order_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("quantity");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)")
                        .HasColumnName("unit_cost");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id" }, "id")
                        .HasDatabaseName("id4");

                    b.HasIndex(new[] { "InventoryId" }, "inventory_id")
                        .HasDatabaseName("inventory_id1");

                    b.HasIndex(new[] { "ProductId" }, "product_id")
                        .HasDatabaseName("product_id2");

                    b.HasIndex(new[] { "PurchaseOrderId" }, "purchase_order_id")
                        .HasDatabaseName("purchase_order_id2");

                    b.ToTable("purchase_order_details");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.PurchaseOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("purchase_order_status");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.SalesReport", b =>
                {
                    b.Property<string>("GroupBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("group_by");

                    b.Property<bool>("Default")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("default");

                    b.Property<string>("Display")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display");

                    b.Property<string>("FilterRowSource")
                        .HasColumnType("longtext")
                        .HasColumnName("filter_row_source");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("GroupBy")
                        .HasName("PRIMARY");

                    b.ToTable("sales_reports");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Shipper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<byte[]>("Attachments")
                        .HasColumnType("longblob")
                        .HasColumnName("attachments");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("business_phone");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company");

                    b.Property<string>("CountryRegion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country_region");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email_address");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("fax_number");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("home_phone");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state_province");

                    b.Property<string>("WebPage")
                        .HasColumnType("longtext")
                        .HasColumnName("web_page");

                    b.Property<string>("ZipPostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("zip_postal_code");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "City" }, "city")
                        .HasDatabaseName("city2");

                    b.HasIndex(new[] { "Company" }, "company")
                        .HasDatabaseName("company2");

                    b.HasIndex(new[] { "FirstName" }, "first_name")
                        .HasDatabaseName("first_name2");

                    b.HasIndex(new[] { "LastName" }, "last_name")
                        .HasDatabaseName("last_name2");

                    b.HasIndex(new[] { "StateProvince" }, "state_province")
                        .HasDatabaseName("state_province2");

                    b.HasIndex(new[] { "ZipPostalCode" }, "zip_postal_code")
                        .HasDatabaseName("zip_postal_code2");

                    b.ToTable("shippers");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.String", b =>
                {
                    b.Property<int>("StringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("string_id");

                    b.Property<string>("StringData")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("string_data");

                    b.HasKey("StringId");

                    b.ToTable("strings");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("longtext")
                        .HasColumnName("address");

                    b.Property<byte[]>("Attachments")
                        .HasColumnType("longblob")
                        .HasColumnName("attachments");

                    b.Property<string>("BusinessPhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("business_phone");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company");

                    b.Property<string>("CountryRegion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("country_region");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email_address");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("fax_number");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("home_phone");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_title");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("mobile_phone");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext")
                        .HasColumnName("notes");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("state_province");

                    b.Property<string>("WebPage")
                        .HasColumnType("longtext")
                        .HasColumnName("web_page");

                    b.Property<string>("ZipPostalCode")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("zip_postal_code");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "City" }, "city")
                        .HasDatabaseName("city3");

                    b.HasIndex(new[] { "Company" }, "company")
                        .HasDatabaseName("company3");

                    b.HasIndex(new[] { "FirstName" }, "first_name")
                        .HasDatabaseName("first_name3");

                    b.HasIndex(new[] { "LastName" }, "last_name")
                        .HasDatabaseName("last_name3");

                    b.HasIndex(new[] { "StateProvince" }, "state_province")
                        .HasDatabaseName("state_province3");

                    b.HasIndex(new[] { "ZipPostalCode" }, "zip_postal_code")
                        .HasDatabaseName("zip_postal_code3");

                    b.ToTable("suppliers");

                    b
                        .HasCharSet("utf8")
                        .UseCollation("utf8_general_ci");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.EmployeePrivilege", b =>
                {
                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Employee", "Employee")
                        .WithMany("EmployeePrivileges")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_employee_privileges_employees1")
                        .IsRequired();

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Privilege", "Privilege")
                        .WithMany("EmployeePrivileges")
                        .HasForeignKey("PrivilegeId")
                        .HasConstraintName("fk_employee_privileges_privileges1")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Privilege");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.InventoryTransaction", b =>
                {
                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Order", "CustomerOrder")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("CustomerOrderId")
                        .HasConstraintName("fk_inventory_transactions_orders1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Product", "Product")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_inventory_transactions_products1")
                        .IsRequired();

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.PurchaseOrder", "PurchaseOrder")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("fk_inventory_transactions_purchase_orders1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.InventoryTransactionType", "TransactionTypeNavigation")
                        .WithMany("InventoryTransactions")
                        .HasForeignKey("TransactionType")
                        .HasConstraintName("fk_inventory_transactions_inventory_transaction_types1")
                        .IsRequired();

                    b.Navigation("CustomerOrder");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("TransactionTypeNavigation");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Invoice", b =>
                {
                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Order", "Order")
                        .WithMany("Invoices")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_invoices_orders1");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Order", b =>
                {
                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_orders_customers");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("fk_orders_employees1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Shipper", "Shipper")
                        .WithMany("Orders")
                        .HasForeignKey("ShipperId")
                        .HasConstraintName("fk_orders_shippers1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.OrdersStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_orders_orders_status1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.OrdersTaxStatus", "TaxStatus")
                        .WithMany("Orders")
                        .HasForeignKey("TaxStatusId")
                        .HasConstraintName("fk_orders_orders_tax_status1");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Shipper");

                    b.Navigation("Status");

                    b.Navigation("TaxStatus");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.OrderDetail", b =>
                {
                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_details_orders1")
                        .IsRequired();

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_order_details_products1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.OrderDetailsStatus", "Status")
                        .WithMany("OrderDetails")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_order_details_order_details_status1");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.PurchaseOrder", b =>
                {
                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Employee", "CreatedByNavigation")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("fk_purchase_orders_employees1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.PurchaseOrderStatus", "Status")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_purchase_orders_purchase_order_status1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("fk_purchase_orders_suppliers1");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Status");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.PurchaseOrderDetail", b =>
                {
                    b.HasOne("_6_LinQwithManyTables.Lily.Data.InventoryTransaction", "Inventory")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("InventoryId")
                        .HasConstraintName("fk_purchase_order_details_inventory_transactions1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_purchase_order_details_products1");

                    b.HasOne("_6_LinQwithManyTables.Lily.Data.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderId")
                        .HasConstraintName("fk_purchase_order_details_purchase_orders1")
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Employee", b =>
                {
                    b.Navigation("EmployeePrivileges");

                    b.Navigation("Orders");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.InventoryTransaction", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.InventoryTransactionType", b =>
                {
                    b.Navigation("InventoryTransactions");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Order", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("Invoices");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.OrderDetailsStatus", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.OrdersStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.OrdersTaxStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Privilege", b =>
                {
                    b.Navigation("EmployeePrivileges");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Product", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("OrderDetails");

                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.PurchaseOrder", b =>
                {
                    b.Navigation("InventoryTransactions");

                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.PurchaseOrderStatus", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Shipper", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("_6_LinQwithManyTables.Lily.Data.Supplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
